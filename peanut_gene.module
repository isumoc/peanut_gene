<?php

require('includes/peanut_gene.fields.inc');


/*
* implements hook_entity_view
*/
function peanut_gene_entity_view($entity, $type, $view_mode, $langcode) {

  if ($entity->type == 'TripalEntity' && $entity->bundle == 'bio_data_6') {

    // add an "extra field" for micro_synteny_view
    $entity->content['fields_extra_micro_synteny_view'] = array(
      '#markup' =>  '<a href="https://legumeinfo.org/lis_context_viewer/#/search/lis/' .
      $entity->content['schema__name'][0]['#markup'] . '">' .
      $entity->content['schema__name'][0]['#markup'] . '</a>'
    );
    // end micro_synteny_view

    // begin add an "extra field" for mRNA and protein identifiers
    $protein_identifier_content = '';
    if ( $entity->content['schema__name']['#object']->sbo__relationship['und'][0]['value']['local:relationship_subject']['rdfs:type'] == 'mRNA')
          $protein_identifier_content = '<a href="#"><span class="mRNA">' .
          $entity->content['schema__name']['#object']->sbo__relationship['und'][0]['value']['local:relationship_subject']['schema:name'] .
          '<span></a>';

    if ( $entity->content['schema__name']['#object']->sbo__relationship['und'][1]['value']['local:relationship_subject']['rdfs:type'] == 'mRNA')
          $protein_identifier_content = '<a href="#"><span class="mRNA">' .
          $entity->content['schema__name']['#object']->sbo__relationship['und'][1]['value']['local:relationship_subject']['schema:name'] .
          '<span></a>';

    $entity->content['fields_extra_mrna_protein_identifiers'] = array(
      '#markup' => $protein_identifier_content
    );
    // end mRNA

    // modify the look of the ncgr_gene_family field markup
    $ncgr_gene_family_markup = $entity->content['ncgr__gene_family'][0]['#markup'];
    $entity->content['ncgr__gene_family'][0] = array(
      '#markup' => '<a href="https://legumeinfo.org/chado_gene_phylotree_v2?family=' .
                    $ncgr_gene_family_markup .
                    '&gene_name=' .
                    $entity->content['schema__name'][0]['#markup'] . '">' .
                    $ncgr_gene_family_markup .
                    '</a>'
    );
    // end ncgr_gene_family

    // update the urls in the description field markup
    $description_markup = $entity->content['sofp__note'][0]['#markup'];
    $entity->content['sofp__note'][0] = array(
      '#markup' => peanutbase_theme_description_urlrewrite($description_markup)
    );
    // end description

  }//end if bio_data_6
} // end function

function peanut_gene_preprocess_entity(&$variables) {
  if (isset($variables['TripalEntity']) && ($variables['TripalEntity']->bundle == 'bio_data_6')) {
    $variables['theme_hook_suggestions'][] =  'TripalEntity__peanut_gene';
  }
}

/**
*
*  VIEWS/SEARCH FORM CODE BEGINS HERE
*  CODE STRAIGHT FROM TRIPAL_GENE
*
**/

/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup tripal_organism
 */
function peanut_gene_views_api() {
  $path = drupal_get_path('module', 'peanut_gene');
  return array(
    'api' => 3.0,
    'path' => $path . '/views',
  );
}


/**
  * hook_views_query_alter()
  *
  * Modify the query before it is executed.
  */
function peanut_gene_views_query_alter(&$view, &$query) {
  // If a term is set in the description field, use it to search OBO terms as well as
  //    description fields
  if (isset($view->exposed_raw_input['description']) && ($term = $view->exposed_raw_input['description'])) {
    // Get matching terms and their childern
    if ($child = peanut_gene_getAllRelated($view->exposed_raw_input['description'])) {
      // Remove description search from existing filter conditions
      foreach (array_keys($query->where) as $i) {
        for ($j=0; $j<count($query->where[$i]['conditions']); $j++) {
           if ($query->where[$i]['conditions'][$j]['field'] == 'gene.description') {
             unset($query->where[$i]['conditions'][$j]);
           }
         }//each condition clause

         // Get rid of this where clause if empty
         if (count($query->where[$i]['conditions']) == 0) {
           unset($query->where[$i]);
         }
      }//each condition

      // Create an OR condition between the description LIKE condition and gene name
      //   IN condition
      $query->where[] = array(
        'conditions' => array(
          0 => array(
                 'field'    => 'gene.description',
                 'value'    => "%$term%",
                 'operator' => 'LIKE',
               ),
          1 => array(
                 'field'    => 'gene.name',
                 'value'    => array_keys($child),
                 'operator' => 'IN',
               ),
          ),
        'type' => 'OR',
      );
    }//found OBO terms
  }//search OBO terms for description term
}// end function



function peanut_gene_getAllRelated($term) {
  // Set ontologies to search:
  $search_ontologies = array();
  $sql = "
    SELECT cv_id, name FROM {cv}
    WHERE name IN ('biological_process', 'gene_ontology', 'molecular_function','cellular_component')";

  $results = chado_query($sql);
  foreach ($results as $r) {
    $search_ontologies[$r->cv_id] = $r->name;
  }

  // Get similar terms
  $child_obo_terms = array();
  $obo_terms = ontology_search_setSimilarTerms($term, $search_ontologies, false);
  if ($obo_terms) {
    foreach (array_keys($obo_terms) as $cvterm_id) {
      //drupal_set_message("am i 0");
      if ($children = ontology_search_getChild($cvterm_id)) {
        foreach ($children as $child) {
          $child_obo_terms[$child['cvterm_id']] = $child['accession'];
        }
      }
    }//each trait OBO term
  }

  $child_gene = false;
  if (count(array_keys($child_obo_terms)) > 0) {
    $b = array_keys($child_obo_terms);
    $nql = "
      SELECT f.name AS fname, c.name AS cname FROM {cvterm} c
        INNER JOIN {feature_cvterm} fc ON fc.cvterm_id=c.cvterm_id
        INNER JOIN {feature} f ON f.feature_id=fc.feature_id
      WHERE c.cvterm_id IN(".implode(',',$b).")
            AND f.type_id IN (SELECT x.cvterm_id FROM {cvterm} AS x
                              WHERE x.name='gene' AND cv_id =(SELECT cv_id FROM {cv} AS v
                                                              WHERE v.name='sequence'))";

    $ree = chado_query($nql);
    $child_gene = array();
    $i = 0;
    foreach($ree as $a) {
      $child_gene[$a->fname] = $a->cname;
      $i++;
    }
  }
  return $child_gene;
}//getAllRelated






/**
  * Form validator for search form.
  *
  * Use this to trim whitespace from text fields.
*/
function peanut_gene_form_validate($form, &$form_state) {
  if (isset($form_state['values']['domains']))
    $form_state['values']['domains']     = trim($form_state['values']['domains']);
  if (isset($form_state['values']['description']))
    $form_state['values']['description'] = trim($form_state['values']['description']);
  if (isset($form_state['values']['gene_family']))
    $form_state['values']['gene_family'] = trim($form_state['values']['gene_family']);
  if (isset($form_state['values']['name']))
    $form_state['values']['name']        = trim($form_state['values']['name']);
}


/**
 * Implementation of hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * @ingroup tripal_organism
 */
function peanut_gene_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'gene')) {
    $form['#validate'][] = 'peanut_gene_form_validate';

    // Change default value for submit button
    $form['submit']['#value'] = 'Search';
  }

  $form['#method'] = 'post';
  switch ($form_id) {
    case 'chado_gene_node_form':
      // turn of preview button for insert/updates
      $form['actions']['preview']['#access'] = FALSE;

      //remove the body field
      unset($form['body']);
      break;
  } //switch
}


