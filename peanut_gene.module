<?php

require('includes/peanut_gene.fields.inc');

/**
 *
 * Implements hook_views_api().
 *
 */
function peanut_gene_views_api() {
  $path = drupal_get_path('module', 'peanut_gene');
  return array(
    'api' => 3.0,
    'path' => $path . '/views',
  );
}

/**
 *
 * implements hook_theme_registry_alter()
 *
 * @param $theme_registry
 */
function peanut_gene_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'peanut_gene');
  $path = $path . '/theme/templates';
  $theme_registry += drupal_find_theme_templates($theme_registry, '.tpl.php', $path);
}


/**
 *
 * implements hook_entity_view()
 *
 */
function peanut_gene_entity_view($entity, $type, $view_mode, $langcode) {
  if ($entity->type == 'TripalEntity' && $entity->bundle == 'bio_data_6'){

    // add an "extra field" for micro_synteny_view
    $entity->content['fields_extra_micro_synteny_view'] = array( array(
      '#markup' =>  '<a href="https://legumeinfo.org/lis_context_viewer/#/search/lis/' .
      $entity->local__gene_name['und'][0]['value'] . '">' .
      $entity->local__gene_name['und'][0]['value'] . '</a>' ),
    );
    // end micro_synteny_view

    // add an "extra field" for mRNA and protein identifiers
    // TODO: handle no mRNA cases, hide sidebar etc.
    $protein_identifier_content = '';
    foreach ($entity->sbo__relationship['und'] as $rel){
      if ($rel['value']['local:relationship_subject']['rdfs:type'] == 'mRNA') {
        $protein_identifier_content =
          '<a href="#"><span class="mRNA">' .
          $rel['value']['local:relationship_subject']['schema:name'] .
          '<span></a>';
      }
    }
    $entity->content['fields_extra_mrna_protein_identifiers'] = array(
      array( '#markup' => $protein_identifier_content ),
    );
    // end "extra field" for mRNA

  }//end if bio_data_6
} // end function



/**
 *
 * Implementation of hook_form_alter().
 *
 */
function peanut_gene_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'views-exposed-form-search-api-gene-index-page')) {

    $module_path = drupal_get_path("module", "peanut_gene");
    $peanut_gene_css = $module_path ."/theme/css/peanut_gene.css";
    drupal_add_css($peanut_gene_css);

    $form['local_gene_species'] = array(
      '#type' => 'select',
      '#label' => 'Species',
      '#options' => array(
        '' => t('Any'),
        'araip' => t('Araip'),
        'aradu' => t('Aradu'),
      ),
    );
  } //end if form['#id']
}


/**
 * Implementation  .
 *
 * @param $domains
 *
 */
function peanut_gene_domains_urlrewrite($domains) {
  //eg. http://pfam.xfam.org/family/PF12854
  $pattern = '/(PF\d+)/';
  $replacement = '<a href="http://pfam.xfam.org/family/${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://pantherdb.org/panther/family.do?clsAccession=PTHR32125
  $pattern = array('/(PTHR\d+\s+)/','/(PTHR\d+$)/');
  $replacement = '<a href="http://pantherdb.org/panther/family.do?clsAccession=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  $pattern = '/(PTHR\d+)(:SF\d+)/';
  $replacement = '<a href="http://pantherdb.org/panther/family.do?clsAccession=${1}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. https://prosite.expasy.org/PS50171
  $pattern = '/(PS\d+)/';
  $replacement = '<a href="https://prosite.expasy.org/${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

   //eg. http://smart.embl.de/smart/do_annotation.pl?DOMAIN=SM01050
  $pattern = '/(SM\d+)/';
  $replacement = '<a href="http://smart.embl.de/smart/do_annotation.pl?DOMAIN=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=50249
  $pattern = '/(SSF\d+)/';
  $replacement = '<a href="http://supfam.org/SUPERFAMILY/cgi-bin/scop.cgi?sunid=${1}">${1}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);
  // remove SSF from the search param. there is a better way
  $domains = preg_replace('/(cgi\?sunid=SSF)/','cgi?sunid=', $domains);

  //eg. http://www.cathdb.info/version/latest/superfamily/1.20.1250.20
  $pattern = '/(G3DSA:)(\d+\.\d+\.\d+\.\d+)/';
  $replacement = '<a href="http://www.cathdb.info/version/latest/superfamily/${2}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  //eg. http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc=TIGR00861
  $pattern = '/(TIGR)(\d+)/';
  $replacement = '<a href="http://www.jcvi.org/cgi-bin/tigrfams/HmmReportPage.cgi?acc=${1}${2}">${1}${2}</a>';
  $domains = preg_replace( $pattern , $replacement , $domains);

  return $domains;
}

/**
 * Implementation  .
 *
 * @param $description
 *
 */
function peanut_gene_description_urlrewrite($description) {
  $pattern = '/(GO:\d+)/i';
  $replacement = '<a href="http://amigo.geneontology.org/amigo/term/${1}">${1}</a>';
  $description = preg_replace( $pattern , $replacement , $description);

  $pattern = '/(IPR\d+)/i';
  $replacement = '<a href="http://www.ebi.ac.uk/interpro/entry/${1}">${1}</a>';
  $description = preg_replace( $pattern , $replacement , $description);

  return $description;
}
